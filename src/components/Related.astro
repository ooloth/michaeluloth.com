---
import { type Bookmark, type Draft, type Note, type Post, type SinglePage } from '../utils/collections'
import { getNotes } from '../utils/notes'
import { getPosts } from '../utils/posts'
import { getBookmarks } from '../utils/bookmarks'
import { getAllEntriesWithSameTagsAsEntry } from '../utils/tags'
import { getDrafts } from '../utils/drafts'
import { getIconHtml } from '../actions/filterNotes'

type Props = {
  entry: Post | Draft | Note | Bookmark | SinglePage
}

const { entry } = Astro.props

const entriesWithSameTags = getAllEntriesWithSameTagsAsEntry(entry, [
  ...(await getPosts()),
  ...(await getBookmarks()),
  ...(await getDrafts()),
  ...(await getNotes()),
])

const hasRelatedEntries = Object.keys(entriesWithSameTags).length > 0

const tagsInDisplayOrder = Object.keys(entriesWithSameTags).sort((a, b) => {
  // "introduction" first; first tag in entry.data.tags (i.e. the primary tag) second; everything else in alphabetical order:
  if (a === 'introduction') return -1
  if (b === 'introduction') return 1
  if (entry.data.tags?.includes(a)) return -1
  if (entry.data.tags?.includes(b)) return 1
  return 0
})

// Used below to avoid displaying the same entry twice under different tags
const displayedIds = new Set()
---

{
  hasRelatedEntries ? (
    <footer class="markdown mt-12 border-t-[1px] border-zinc-600 ">
      {tagsInDisplayOrder.map(tag => {
        const tagEntries = entriesWithSameTags[tag]

        if (tagEntries.length === 0) return null
        if (tagEntries.every(entry => displayedIds.has(entry.id))) return null

        return (
          <section>
            <h2 class="text-red-500">
              Related to <span class="text-zinc-400">#{tag}</span>
            </h2>
            <ul>
              {tagEntries.map(entry => {
                if (displayedIds.has(entry.id)) return null
                displayedIds.add(entry.id)

                return (
                  <li>
                    <a href={`/${entry.id}/`} class="link-nav">
                      {entry.data.title}
                    </a>
                    <span class="ml-1" set:html={getIconHtml(entry)} />
                  </li>
                )
              })}
            </ul>
          </section>
        )
      })}
    </footer>
  ) : null
}
