---
import { isBookmark } from '../utils/bookmarks'
import { type Bookmark, type Draft, type Note, type Post, type SinglePage } from '../utils/collections'
import { isDraft } from '../utils/drafts'
import { isPost, isPublished } from '../utils/posts'

type Props = {
  entry: Post | Draft | Note | Bookmark | SinglePage
  title: string
}

// TODO: add unit tests, auditing
const getDisclaimer = (entry: Post | Draft | Note | Bookmark | SinglePage, title: string): string | null => {
  const noDisclaimer = ['about', 'workouts']

  const byAuthorIfAuthor = 'author' in entry.data && entry.data.author ? ` by ${entry.data.author}` : ''
  const whereToFindWriting = `For more polished work, check out <a href="/" class="link">writing</a>.`

  const disclaimer =
    (isPost(entry) && isPublished(entry)) || noDisclaimer.includes(entry.id)
      ? null
      : isDraft(entry)
        ? `This is a rough draft of a potential blog post. ${whereToFindWriting}`
        : isBookmark(entry) && 'source' in entry.data
          ? `These are my unfinished notes about <a href="${entry.data.source}">${title}</a>${byAuthorIfAuthor}. ${whereToFindWriting}`
          : `These are my unfinished notes about ${title}. ${whereToFindWriting}`

  return disclaimer
}

const disclaimer = getDisclaimer(Astro.props.entry, Astro.props.title)
---

{
  disclaimer ? (
    <aside role="note" class="mb-8 border border-[--moonlight-red] rounded w-fit">
      <p class="!m-0 py-2 px-3">
        <em set:html={disclaimer} />
      </p>
    </aside>
  ) : null
}
