---
import { getBookmarks } from '../utils/bookmarks'
import { isPathnameInCollection, type Bookmark, type Draft, type Note, type Post, type TIL } from '../utils/collections'
import { getDrafts, getPosts } from '../utils/posts'
import { getTILs } from '../utils/tils'

type Props = {
  entry: Post | TIL | Draft | Note | Bookmark
  title: string
}

const { pathname } = Astro.url

const posts = await getPosts()
const tils = await getTILs()
const drafts = await getDrafts()
const bookmarks = await getBookmarks()

const isPost = isPathnameInCollection(pathname, posts)
const isTIL = isPathnameInCollection(pathname, tils)
const isDraft = isPathnameInCollection(pathname, drafts)
const isBookmark = isPathnameInCollection(pathname, bookmarks)

// TODO: add unit tests, auditing
const getDisclaimer = (entry: Post | TIL | Draft | Note | Bookmark, title: string): string | null => {
  const noDisclaimer = ['workouts']

  const byAuthorIfAuthor = 'author' in entry.data && entry.data.author ? ` by ${entry.data.author}` : ''
  const whereToFindWriting = `For more complete write-ups, check out <a href="/" class="link">writing</a> and <a href="/til/" class="link">TIL</a>.`

  const disclaimer =
    isPost || isTIL || noDisclaimer.includes(entry.id)
      ? null
      : isDraft
      ? `This is a rough draft of a potential future blog post. ${whereToFindWriting}`
      : isBookmark && 'source' in entry.data
      ? `These are my unfinished notes about <a href="${entry.data.source}">${title}</a>${byAuthorIfAuthor}. ${whereToFindWriting}`
      : `These are my unfinished notes about ${title}. ${whereToFindWriting}`

  return disclaimer
}

const disclaimer = getDisclaimer(Astro.props.entry, Astro.props.title)
---

{
  disclaimer ? (
    <aside role="note" class="mb-8 border border-[--moonlight-red] rounded">
      <p class="!m-0 py-2 px-3">
        <em set:html={disclaimer} />
      </p>
    </aside>
  ) : null
}
