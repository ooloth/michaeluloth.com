---
import Main from '../layouts/Main.astro'
---

<Main title="Notes" description="Rough notes about coding and other topics.">
  <h1 class="sr-only">Notes</h1>

  <section>
    <h2 class="sr-only">Bookmarks, post drafts and topic notes, filterable by tag</h2>

    <!-- Tag cloud -->
    <ul data-tag-cloud class="flex flex-wrap gap-2"></ul>

    <!-- Bookmarks, post drafts and topic notes by last modified date -->
    <ul data-notes-list class="mt-5 leading-loose"></ul>
  </section>
</Main>

<script>
  import { actions } from 'astro:actions'
  import {
    generateNotesListItemHtml,
    generateTagCloudItemHtml,
    type NotesListItem,
  } from '../actions/filterNotes/generateNotesPageHtml'
  import type { FilteredNotes } from '../actions/filterNotes'

  const getFilteredNotes = async (tags: string[]): Promise<FilteredNotes | null> => {
    const { data, error } = await actions.filterNotes({ tags })

    if (error) {
      console.error(error)
      return null
    }

    return data
  }

  const getTagsFromUrl = (): string[] => {
    const tagsInUrl = new URLSearchParams(window.location.search).get('tags')
    return tagsInUrl ? tagsInUrl.split(',') : []
  }

  const updateTagsInUrl = (tags: string[]): void => {
    const url = new URL(window.location.href)

    if (!tags.length) {
      // Remove the tags parameter from the URL
      url.searchParams.delete('tags')
    } else {
      // Manually add the tags as an unencoded comma-separated list
      url.search = `tags=${tags.sort().join(',')}`
    }

    window.history.pushState({}, '', url)
  }

  const updateTagCloudHtml = (
    tagsInUrl: string[],
    tagsInFilteredEntries: string[],
    tagsInAllEntries: string[],
  ): void => {
    const tagCloud = document.querySelector('ul[data-tag-cloud]')!

    tagCloud.innerHTML = generateTagCloudItemHtml(tagsInUrl, tagsInFilteredEntries, tagsInAllEntries)
  }

  const updateNotesListHtml = (data: NotesListItem[]): void => {
    const notesList = document.querySelector('ul[data-notes-list]')!

    notesList.innerHTML = generateNotesListItemHtml(data)
  }

  const updateUrlAndDOM = async (tags: string[]): Promise<void> => {
    const filteredNotes = await getFilteredNotes(tags)

    if (filteredNotes) {
      const { results, tags } = filteredNotes
      updateTagsInUrl(tags.valid)
      updateTagCloudHtml(tags.valid, tags.filtered, tags.all)
      updateNotesListHtml(results)
      attachTagButtonEventListeners()
    }
  }

  const attachTagButtonEventListeners = (): void => {
    const handleTagButtonClick = (button: Element): void => {
      const tag = button.getAttribute('data-tag-value')!
      const tagsInUrl = getTagsFromUrl()

      // If the tag is already in the URL, remove it; otherwise append it
      const newTagsInUrl = tagsInUrl.includes(tag) ? tagsInUrl.filter(t => t !== tag) : [...tagsInUrl, tag]

      // Otherwise, add the tag to the URL and update the notes list
      updateUrlAndDOM(newTagsInUrl)
    }

    const tagButtons = document.querySelectorAll('button[data-tag-button]')

    tagButtons.forEach(button => {
      button.addEventListener('click', () => handleTagButtonClick(button))
    })
  }

  // On page load, render results matching "tags" URL search parameter
  updateUrlAndDOM(getTagsFromUrl())
</script>
