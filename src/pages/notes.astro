---
import Main from '../layouts/Main.astro'
import { getBookmarks } from '../utils/bookmarks'
import { isPathnameInCollection, type Bookmark, type Writing, type Draft } from '../utils/collections'
import { getAllTagsInNotes, getNotes, getNestedNotes } from '../utils/notes'
import { getDrafts } from '../utils/posts'
import { cleanTags } from '../utils/tags'

const bookmarks = await getBookmarks()
const notesFlat = await getNotes()
const notesByParent = await getNestedNotes()
// const notesByTag = await getNotesByTag()
const tags = await getAllTagsInNotes()

const drafts = await getDrafts()

const getEmoji = (item: Bookmark | Draft | Writing): string => {
  if (item.data.favicon) {
    return `<img src="${item.data.favicon}" alt="" class="" />`
  }

  if (item.data.url) {
    const url = new URL(item.data.url)
    if (url.hostname.includes('youtube.com')) {
      return '📺'
    } else if (url.hostname.includes('github.com')) {
      return '🧰'
    } else if (url.hostname.includes('reddit.com')) {
      return '💬'
    } else {
      return '📖'
    }
  }

  if (isPathnameInCollection(item.slug, drafts)) {
    return '✍️'
  }

  return '📝'
}
---

<Main title="Notes" description="Rough notes about coding and other topics.">
  <h1 class="sr-only">Notes</h1>

  <section>
    <h2 class="sr-only">Topics</h2>

    <!-- <ul class="list-notes">
      {
        notesByParent.map(note => {
          const getLinkText = (item: Writing): string => item.data.linkText || item.data.title || item.slug

          const getChildren = (item: Writing, level: number) =>
            item.data.children && (
              <ul>
                {item.data.children
                  // Sort alphabetically by link text, then title
                  .sort((a: Writing, b: Writing) =>
                    (a.data.linkText || a.data.title).localeCompare(b.data.linkText || b.data.title),
                  )
                  .map((child: Writing) => (
                    <li
                      class="before:content-['└'] before:pe-[0.3rem] mt-[0.1rem]"
                      style={`padding-left: ${level === 0 ? 0 : 1.4}rem`}
                    >
                      <a href={`/${child.slug}/`} class="link">
                        {getLinkText(child)}
                      </a>

                      {/* Recursively render grandchildren, etc */}
                      {getChildren(child, level + 1)}
                    </li>
                  ))}
              </ul>
            )

          return (
            <li class="mb-2 break-inside-avoid-column">
              <a href={`/${note.slug}/`} class="link">
                {getLinkText(note)}
              </a>

              {getChildren(note, 0)}
            </li>
          )
        })
      }
    </ul> -->

    <!-- TODO: tag cloud (when filtering functional) -->
    <!-- <ul class="mt-48 flex flex-wrap gap-2">
      {
        tags.map(tag => (
          <li class="rounded border-[1px] border-[--moonlight-red] hover:bg-[--moonlight-red] px-2 leading-relaxed text-[--moonlight-red] hover:text-zinc-950">
            {tag}
          </li>
        ))
      }
    </ul> -->

    <!-- Notes with tags -->
    <!-- <ul class="mt-10"> -->
    <ul class="mt-10 flex flex-wrap gap-y-2 gap-x-6">
      {
        [...bookmarks, ...drafts, ...notesFlat].map(item => (
          <li class="flex flex-wrap items-center gap-x-2">
            <span class="flex-none w-5" set:html={getEmoji(item)} />
            <a href={`/${item.slug}/`} class="inline link-nav leading-tight">
              {item.data.title || item.slug}
            </a>
            {/* TODO: show item tags? */}
            {/* <ul class="ml-2 inline-flex gap-1">
              {cleanTags(note.data.tags).map(tag => (
                <li class="rounded border-[1px] border-[--moonlight-red] px-[0.25rem] text-[0.7rem] leading-relaxed text-[--moonlight-red]">
                  {tag}
                </li>
              ))}
            </ul> */}
          </li>
        ))
      }
    </ul>
  </section>
</Main>
