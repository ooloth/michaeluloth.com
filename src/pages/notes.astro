---
import Tag from '../components/Tag.astro'
import Main from '../layouts/Main.astro'
import { getBookmarks } from '../utils/bookmarks'
import { isPathnameInCollection, type Bookmark, type Writing, type Draft, type Note } from '../utils/collections'
import { getNotes } from '../utils/notes'
import { getDrafts } from '../utils/posts'
import { getAllTagsInEntries } from '../utils/tags'

const tags = getAllTagsInEntries([...(await getBookmarks()), ...(await getNotes()), ...(await getDrafts())])


export const sortDescending = <T extends Draft | Note | Bookmark>(entries: T[]): T[] => {
  const sortByDate = <T extends Draft | Note | Bookmark>(a: T, b: T): number => {
    const lastModifiedTime = (entry: T): number =>
      'lastModified' in entry.data && entry.data.lastModified
        ? new Date(String(entry.data.lastModified)).getTime()
        : -Infinity

    return lastModifiedTime(b) - lastModifiedTime(a)
  }

  return entries.sort(sortByDate)
}

const notesByLastModified = sortDescending([...bookmarks, ...notes, ...drafts])

const getLinkEmoji = (item: Bookmark | Draft | Writing): string => {
  if ('favicon' in item.data && item.data.favicon) {
    return `<img src="${item.data.favicon}" alt="" width="20" class="inline-block -mt-1 mr-[0.15rem] ml-[0.2rem]" />`
  }

  if ('url' in item.data && typeof item.data.url === 'string') {
    const url = new URL(item.data.url)
    if (url.hostname.includes('youtube.com')) {
      return '📺'
    } else if (url.hostname.includes('github.com')) {
      return '🧰'
    } else if (url.hostname.includes('reddit.com')) {
      return '💬'
    } else {
      return '📖'
    }
  }

  if (isPathnameInCollection(item.id, drafts)) {
    return '✍️'
  }

  return '📝'
}
---

<Main title="Notes" description="Rough notes about coding and other topics.">
  <h1 class="sr-only">Notes</h1>

  <section>
    <h2 class="sr-only">Bookmarks, post drafts and topic notes</h2>

    <!-- Tags -->
    <ul class="flex flex-wrap gap-2">
      {
        tags.map(tag => (
          <li>
            <Tag tag={tag} />
          </li>
        ))
      }
    </ul>

    <!-- Bookmarks, post drafts and topic notes, by last modified date -->
    <ul class="mt-5 leading-loose">
      {
        notesByLastModified.map((item, index) => (
          <li class="inline">
            <span class="whitespace-nowrap">
              <span class="inline mr-1" set:html={getLinkEmoji(item)} />
              <a href={`/${item.id}/`} class="inline link-nav whitespace-normal">
                {item.data.title || item.id} {'author' in item.data && item.data.author ? ` (${item.data.author})` : ''}
              </a>
            </span>

            {index < notesByLastModified.length - 1 ? <span class="mx-2 text-[--moonlight-red]">•</span> : null}
            {/* TODO: show item tags? */}
            {/* <ul class="ml-2 inline-flex gap-1">
              {cleanTags(note.data.tags).map(tag => (
                <li class="rounded border-[1px] border-[--moonlight-red] px-[0.25rem] text-[0.7rem] leading-relaxed text-[--moonlight-red]">
                  {tag}
                </li>
              ))}
            </ul> */}
          </li>
        ))
      }
    </ul>
  </section>
</Main>
