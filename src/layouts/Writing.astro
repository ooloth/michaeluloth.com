---
import { type Draft, isPathnameInCollection, type Writing } from '../utils/collections'
import { getDrafts, getPosts } from '../utils/posts'
import Main from './Main.astro'
import { getHumanReadableDate, getMachineReadableDate } from '../utils/dates'
import Related from '../components/Related.astro'
import { getTILs } from '../utils/tils'
import Comments from '../components/Comments.astro'

type Props = {
  entry: Writing | Draft
}

const { entry } = Astro.props
const { pathname } = Astro.url

const title = entry.data.title || entry.slug
const date = entry.data.date || entry.data.lastModified
const hasBeenModified = new Date(date).toDateString() > new Date(entry.data.lastModified).toDateString()

const posts = await getPosts()
const tils = await getTILs()
const drafts = await getDrafts()

const isPost = isPathnameInCollection(pathname, posts)
const isTIL = isPathnameInCollection(pathname, tils)
const isDraft = isPathnameInCollection(pathname, drafts)

// const tags = cleanTags(entry.data.tags)
---

<Main title={title} description={entry.data.description} ogImage={entry.data.ogImage}>
  <div class="mx-auto max-w-2xl">
    <header class="markdown">
      {
        (isPost || isTIL || isDraft) && (
          <p class="timestamp">
            <time datetime={getMachineReadableDate(date)} class="timestamp">
              {getHumanReadableDate(date)}
            </time>

            {hasBeenModified ? (
              <>
                <span class="mx-1">-</span>
                <time datetime={getMachineReadableDate(entry.data.lastModified)} class="timestamp">
                  {getHumanReadableDate(entry.data.lastModified)}
                </time>
              </>
            ) : null}
          </p>
        )
      }

      <h1>{title}</h1>

      <!-- TODO: how to show tags on all writing pages? -->
      <!-- {
        tags.length ? (
          <ul class="flex flex-wrap gap-2">
            {tags.map(tag => (
              <li>
                <Tag tag={tag} />
              </li>
            ))}
          </ul>
        ) : null
      } -->
    </header>

    <article class="markdown"><slot /></article>
    <Related entry={entry} />
    {isPost ? <Comments /> : null}
  </div>
</Main>
