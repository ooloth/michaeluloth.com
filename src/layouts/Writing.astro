---
import {
  type Bookmark,
  type Draft,
  type Note,
  type SinglePage,
  type Post,
  type PostWithContent,
} from '../utils/collections'
import { isPost } from '../utils/posts'
import Main from './Main.astro'
import { getHumanReadableDate, getMachineReadableDate } from '../utils/dates'
import Related from '../components/Related.astro'
import Comments from '../components/Comments.astro'
import Disclaimer from '../components/Disclaimer.astro'
import PrevNext from '../components/PrevNext.astro'
import { isDraft } from '../utils/drafts'

type Props = {
  entry: PostWithContent | Post | Draft | Note | Bookmark | SinglePage
  prev: PostWithContent | Post | Draft | Note | Bookmark | null
  next: PostWithContent | Post | Draft | Note | Bookmark | null
}

const { entry, prev, next } = Astro.props

const title = entry.data.title || entry.id
const lastModified =
  'lastModified' in entry.data && entry.data.lastModified ? new Date(entry.data.lastModified) : undefined
console.log('lastModified:', lastModified)
const date = ('date' in entry.data && entry.data.date) ?? lastModified

// Compare the dates at the day level (as opposed to the ms level) to determine if it's worth showing a modified date
const hasBeenModified: boolean = date && lastModified ? date.toDateString() > lastModified.toDateString() : false

const source = 'source' in entry.data ? (entry.data.source ?? undefined) : undefined
const description = 'description' in entry.data ? (entry.data.description ?? undefined) : undefined
const ogImage = 'ogImage' in entry.data ? (entry.data.ogImage ?? undefined) : undefined

const showDate = date && (isPost(entry) || isDraft(entry))
const showLastModifiedDate = showDate && lastModified && hasBeenModified
const showComments = isPost(entry)
const showRelated = !isPost(entry)

// const tags = cleanTags(entry.data.tags)
// TODO: extract Timestamp/Dates component?
---

<Main canonicalUrl={source} description={description} ogImage={ogImage} title={title}>
  <div class="mx-auto max-w-[70ch]">
    <header class="markdown">
      {
        showDate ? (
          <p>
            <time datetime={getMachineReadableDate(date)}>{getHumanReadableDate(date)}</time>
            {showLastModifiedDate ? (
              <>
                <span class="mx-1">-</span>
                <time datetime={getMachineReadableDate(lastModified)}>{getHumanReadableDate(lastModified)}</time>
              </>
            ) : null}
          </p>
        ) : null
      }

      <h1>{title}</h1>

      <!-- TODO: how to show tags on all writing pages? -->
      <!-- {
        tags.length ? (
          <ul class="flex flex-wrap gap-2">
            {tags.map(tag => (
              <li>
                <Tag tag={tag} />
              </li>
            ))}
          </ul>
        ) : null
      } -->

      <Disclaimer entry={entry} title={title} />
    </header>

    <article class="markdown"><slot /></article>
    <!-- TODO: move these conditions into the components themselves? bad practice? -->
    {showComments ? <Comments /> : null}
    {showRelated ? <Related entry={entry} /> : null}
    <PrevNext entry={entry} prev={prev} next={next} />
  </div></Main
>
