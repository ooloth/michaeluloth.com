---
import { type Bookmark, type Draft, isPathnameInCollection, type Note, type Post, type TIL } from '../utils/collections'
import { getDrafts, getPosts } from '../utils/posts'
import Main from './Main.astro'
import { getHumanReadableDate, getMachineReadableDate } from '../utils/dates'
import Related from '../components/Related.astro'
import { getTILs } from '../utils/tils'
import Comments from '../components/Comments.astro'
import Disclaimer from '../components/Disclaimer.astro'
import PrevNext from '../components/PrevNext.astro'

type Props = {
  entry: Post | TIL | Draft | Note | Bookmark
  prev: Post | TIL | Draft | Note | Bookmark | null
  next: Post | TIL | Draft | Note | Bookmark | null
}

const { entry, prev, next } = Astro.props
const { pathname } = Astro.url

const title = entry.data.title || entry.id
const lastModified =
  'lastModified' in entry.data && entry.data.lastModified ? new Date(entry.data.lastModified) : undefined
const date = entry.data.date ?? lastModified

// Compare the dates at the day level (as opposed to the ms level) to determine if it's worth showing a modified date
const hasBeenModified: boolean = date && lastModified ? date.toDateString() > lastModified.toDateString() : false

const posts = await getPosts()
const tils = await getTILs()
const drafts = await getDrafts()

const isPost = isPathnameInCollection(pathname, posts)
const isTIL = isPathnameInCollection(pathname, tils)
const isDraft = isPathnameInCollection(pathname, drafts)

const source = 'source' in entry.data ? (entry.data.source ?? undefined) : undefined
const description = 'description' in entry.data ? (entry.data.description ?? undefined) : undefined
const ogImage = 'ogImage' in entry.data ? (entry.data.ogImage ?? undefined) : undefined

// const tags = cleanTags(entry.data.tags)
---

<Main canonicalUrl={source} description={description} ogImage={ogImage} title={title}>
  <div class="mx-auto max-w-[70ch]">
    <header class="markdown">
      {
        date && (isPost || isTIL || isDraft) ? (
          <p class="timestamp">
            <time datetime={getMachineReadableDate(date)} class="timestamp">
              {getHumanReadableDate(date)}
            </time>

            {lastModified && hasBeenModified ? (
              <>
                <span class="mx-1">-</span>
                <time datetime={getMachineReadableDate(lastModified)} class="timestamp">
                  {getHumanReadableDate(lastModified)}
                </time>
              </>
            ) : null}
          </p>
        ) : null
      }

      <h1>{title}</h1>

      <!-- TODO: how to show tags on all writing pages? -->
      <!-- {
        tags.length ? (
          <ul class="flex flex-wrap gap-2">
            {tags.map(tag => (
              <li>
                <Tag tag={tag} />
              </li>
            ))}
          </ul>
        ) : null
      } -->

      <Disclaimer entry={entry} title={title} />
    </header>

    <article class="markdown"><slot /></article>
    <Related entry={entry} />
    {isPost || isTIL ? <Comments /> : null}
  </div>
</Main>
    <!-- <Subscribe /> -->
    {isPost || isTIL ? <PrevNext prev={prev} next={next} /> : null}
