---
import { type Draft, isPathnameInCollection, type Writing } from '../utils/collections'
import { getDrafts, getPosts } from '../utils/posts'
import Main from './Main.astro'
import { getHumanReadableDate, getMachineReadableDate } from '../utils/dates'
import Related from '../components/Related.astro'

type Props = {
  entry: Writing | Draft
}

const { entry } = Astro.props
const { pathname } = Astro.url

const title = entry.data.title || entry.slug
const date = entry.data.date || entry.data.lastModified

const posts = await getPosts()
const drafts = await getDrafts()

const isPost = isPathnameInCollection(pathname, posts)
const isDraft = isPathnameInCollection(pathname, drafts)

// const tags = cleanTags(entry.data.tags)
---

<Main title={title} description={entry.data.description} ogImage={entry.data.ogImage}>
  <div class="mx-auto max-w-2xl">
    <header class="markdown">
      {
        (isPost || isDraft) && (
          <time datetime={getMachineReadableDate(date)} class="timestamp">
            {getHumanReadableDate(date)}
          </time>
        )
      }

      <h1>{title}</h1>

      <!-- TODO: how to show tags on all writing pages? -->
      <!-- {
        tags.length ? (
          <ul class="flex flex-wrap gap-2">
            {tags.map(tag => (
              <li>
                <Tag tag={tag} />
              </li>
            ))}
          </ul>
        ) : null
      } -->
    </header>

    <article class="markdown"><slot /></article>
    <Related entry={entry} />

    {
      isPathnameInCollection(pathname, posts) && (
        <script
          src="https://giscus.app/client.js"
          data-repo="ooloth/comments"
          data-repo-id="R_kgDOJo8JPg"
          data-category="Announcements"
          data-category-id="DIC_kwDOJo8JPs4CXtJE"
          data-mapping="pathname"
          data-strict="1"
          data-reactions-enabled="1"
          data-emit-metadata="0"
          data-input-position="bottom"
          data-theme="dark"
          data-lang="en"
          crossorigin="anonymous"
          async
          defer
        />
      )
    }

    <!-- <p class="text-[0.8rem] md:text-[0.9rem] uppercase md:min-w-[8rem]">
    Last updated
    <time datetime="htmlDateString(page.date)" @text="readableDate(page.date)"></time>
  </p> -->
  </div>
</Main>
