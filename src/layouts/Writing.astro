---
import { type Bookmark, type Draft, isPathnameInCollection, type TIL, type Writing } from '../utils/collections'
import { getDrafts, getPosts } from '../utils/posts'
import Main from './Main.astro'
import { getHumanReadableDate, getMachineReadableDate } from '../utils/dates'
import Related from '../components/Related.astro'
import { getTILs } from '../utils/tils'
import Comments from '../components/Comments.astro'
import { getBookmarks } from '../utils/bookmarks'

type Props = {
  entry: Writing | Draft
}

const { entry } = Astro.props
const { pathname } = Astro.url

const title = entry.data.title || entry.slug
const date = entry.data.date || entry.data.lastModified
const hasBeenModified = new Date(date).toDateString() > new Date(entry.data.lastModified).toDateString()

const posts = await getPosts()
const tils = await getTILs()
const drafts = await getDrafts()
const bookmarks = await getBookmarks()

const isPost = isPathnameInCollection(pathname, posts)
const isTIL = isPathnameInCollection(pathname, tils)
const isDraft = isPathnameInCollection(pathname, drafts)
const isBookmark = isPathnameInCollection(pathname, bookmarks)

// TODO: add unit tests, auditing
const getDisclaimer = (entry: Writing | Draft | TIL | Bookmark): string | null => {
  const noDisclaimer = ['workouts']

  const byAuthorIfAuthor = entry.data.author ? ` by ${entry.data.author}` : ''
  const whereToFindWriting = `For more complete ideas, check out my <a href="/" class="link">writing</a> and <a href="/til/" class="link">TIL</a> pages.`

  const disclaimer =
    isPost || isTIL || noDisclaimer.includes(entry.slug)
      ? null
      : isDraft
      ? `This is a rough draft of a potential future blog post. ${whereToFindWriting}`
      : isBookmark
      ? `These are my rough notes on <a href="${entry.data.source}">${title}</a>${byAuthorIfAuthor}. ${whereToFindWriting}`
      : `These are my rough notes about ${title}. ${whereToFindWriting}`

  return disclaimer
}

const disclaimer = getDisclaimer(entry)

// const tags = cleanTags(entry.data.tags)
---

<Main canonicalUrl={entry.data.source} description={entry.data.description} ogImage={entry.data.ogImage} title={title}>
  <div class="mx-auto max-w-2xl">
    <header class="markdown">
      {
        (isPost || isTIL || isDraft) && (
          <p class="timestamp">
            <time datetime={getMachineReadableDate(date)} class="timestamp">
              {getHumanReadableDate(date)}
            </time>

            {hasBeenModified ? (
              <>
                <span class="mx-1">-</span>
                <time datetime={getMachineReadableDate(entry.data.lastModified)} class="timestamp">
                  {getHumanReadableDate(entry.data.lastModified)}
                </time>
              </>
            ) : null}
          </p>
        )
      }

      <h1>{title}</h1>

      <!-- TODO: how to show tags on all writing pages? -->
      <!-- {
        tags.length ? (
          <ul class="flex flex-wrap gap-2">
            {tags.map(tag => (
              <li>
                <Tag tag={tag} />
              </li>
            ))}
          </ul>
        ) : null
      } -->

      {
        disclaimer ? (
          <aside role="note" class="mb-8 border border-[--moonlight-red] rounded italic">
            <p set:html={disclaimer} class="!m-0 py-2 px-3 text-bright" />
          </aside>
        ) : null
      }
    </header>

    <article class="markdown"><slot /></article>
    <Related entry={entry} />
    {isPost ? <Comments /> : null}
  </div>
</Main>
